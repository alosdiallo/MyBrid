<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

include_once("datainfo.php");

define("X_ELEMENTS", 48);
define("Y_ELEMENTS", 32);
	
class Data_Model extends CI_Model{

	/*
	 * Table names to be used
	 */
	private $promoterTable = "Promoter";
	private $transcriptionTable = "TranscriptorFactor";
	private $interactionTable = "Interactions";
	private $imageTable = "images";

	private $pictures;
	private $data;
	
	
	
	public function __construct(){
		parent::__construct();
		$this->pictures = array();
		$this->data = array();
	}
	
	public function getPromoterTable()     { return $this->promoterTable      ;}
	public function getTranscriptionTable(){ return $this->transcriptionTable ;}
	public function getInteractionTable()  { return $this->interactionTable   ;}
	public function getImageTable()        { return $this->imageTable         ;}
	
	/*
	 * when the user inputs the action i.e transcriptor factors
	 * and the input i.e 'dmd-4' the search is performed and 
	 * the data is returned
	 */
	/*
	public function getPromoterData($promoter, $positiveSearch, $searchAll, $transcriptionData = array(0) ){
		//echo $promoter . "," . $positiveSearch .",". $searchAll .",". $transcriptionFactor .",". $plateSuffix .";";
		//0,,1,C27C12.6,_1-4; 
		
		if( $searchAll) {
			if($positiveSearch['value']){ 
				$this->data = $this->getDataAllPositive($positiveSearch, $transcriptionData);
			} else {                     
				$this->data = $this->getDataAll($transcriptionData);
			}
		} else {                          
	            $this->data = $this->getDataPromoter($promoter, $transcriptionData);
		}
		return $this->data;
	}*/
	
	/*
	*** getdataPromotor, getdataAll
	* These functions create an appropriate mysql query that will
	* retrieve the data then sends it off to makequery to actually
	* make the query
	**/
	public function getDataPromoter($promoter, $transcriptionData = array(0)){
		$str = "SELECT * FROM $this->promoterTable WHERE bait_id    = '$promoter' 
		                                     OR bait_name  = '$promoter' 
		                                     OR bait_name2 = '$promoter' 
		                                     OR bait_name3 = '$promoter'";
		return $this->makeQuery($str, $transcriptionData);
	}
	public function getDataAll($transcriptionData = array(0)){
		$str = "SELECT * FROM $this->promoterTable";
		return $this->makeQuery($str, $transcriptionData);
	}
	public function getPromoterData($promoter, $transcriptionData = array(0), $positiveSearch = array('value'=>FALSE) ){
		/*//////////////////////////////////////////////////////////////
		 * Set up the positive search values if the positive search isn't happening
		 * 			The positive search isn't happening if $positiveSearch['value'] is false or undefined
		 * 			NOTE: Currently it will error if undefined.
		 */
		//print_r($positiveSearch);
		if(!$positiveSearch['value']){
			$positiveSearch['call']                = "";
			$positiveSearch['minZScore']           = -1000;
			$positiveSearch['plateNumber']         = "";
			$positiveSearch['transcriptionFactor'] = "";
		}
		////////////////////////////////////////////////////////////////
		//echo $promoter;
		$str = "SELECT DISTINCT $this->promoterTable.*,
		                        $this->interactionTable.plate_number,
		                        MAX($this->interactionTable.z_score) AS z_score
		        FROM $this->promoterTable, $this->interactionTable
		        WHERE $this->interactionTable.plate_name = $this->promoterTable.bait_id
		          AND $this->interactionTable.plate_number LIKE '%".$positiveSearch['plateNumber']."'
		          AND $this->interactionTable.transcriptor_factor LIKE '%".$positiveSearch['transcriptionFactor']."'
		          AND ($this->promoterTable.bait_id LIKE '%$promoter'
		               OR $this->promoterTable.bait_name LIKE '%$promoter'
		               OR $this->promoterTable.bait_name2 LIKE '%$promoter'
		               OR $this->promoterTable.bait_name3 LIKE '%$promoter')
		          AND $this->interactionTable.call_type LIKE '%".$positiveSearch['call']."'
		        GROUP BY $this->promoterTable.bait_id, $this->interactionTable.plate_number
		        HAVING z_score > '".$positiveSearch['minZScore']."'
		       ";
		//echo $str;
		return $this->makeQuery($str, $transcriptionData);

	}
	/*
	 * 
	 */
	public function getTranscriptionFactorData($transcriptionFactor){
		$str = "SELECT * FROM $this->transcriptionTable WHERE orf_name = '$transcriptionFactor' 
		                                          OR orf_name2   = '$transcriptionFactor' 
		                                          OR wb_gene     = '$transcriptionFactor' 
		                                          OR common_name = '$transcriptionFactor'
		                                          OR coordinate  = '$transcriptionFactor'
		                                          OR coordinate2 = '$transcriptionFactor'
		                                          OR info        = '$transcriptionFactor'";
		$transcriptionData = $this->makeQuery($str);
		return $transcriptionData[0];
	}
	
	/*
	 * Callback to make this function better.
	 */
	public function makeQuery($string, $transcriptionData = array(0, 0, 0)){
		$data = array();
		$j=0;
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return $data;}
		$query = $this->db->query($string);
		
		if(!$query)
		{
			return array();
		}
		else{
			if($query->num_rows() > 0){
				foreach($query->result() as $row){
					
					//$data[] = $row;
					if(isset($row->plate_number)){
						if(isset($transcriptionData[$row->plate_number])){
							$data[$j] = clone $row;
							if($transcriptionData[$row->plate_number]){$data[$j]->transcriptionData = $transcriptionData[$row->plate_number];}
							$j++;
						}
					} else {
						$data[] = $row;
					}
							
							
					/*foreach($transcriptionData as $tsf_data){
							
						if(isset($row->plate_number)){
							$k++;
							if($k != $row->plate_number){continue;}
						}
						
						$data[$j] = clone $row;
						if($tsf_data != 0){$data[$j]->transcriptionData = $tsf_data;} // If transcriptionData is defined, add to Data
						$j++; 
						
					
					}*/
				}
			} else {
				return array();
			}
		}
		return $data;
	}
	
	/*
	*** setPictures
	* will take the idbait from each element of the array and set
	* a picture array which contains the pictures for that 
	* timecourse
	**/ 
	public function getPictures($baits){
		$pictures = array();
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return $pictures;}
		
		foreach($baits as $bait){	
			$str = "SELECT * FROM $this->imageTable WHERE image LIKE '" . $bait . "%'";
			
			$data = $this->makeQuery($str);
			if($data == false){
				continue;
			}
			else{
				array_push($pictures, $data);
			}
		}
		
		return $pictures;
	}
	
	/*
	*** setPictures
	* &$data is a reference to the data (Array of associative arrays)
	* will take the idbait from each element of the array and set
	* a picture array which contains the pictures for that 
	* timecourse
	**/ 
	
	
	/*
	 * Sets the pictures
	 * if unsuccessful return an error message
	 */
	public function setPictures(&$data, $getAllPictures = FALSE)
	{
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return 0;}
			
		/*
		 * Go through the plates and assign a picture to them
		 */
		foreach($data as &$id)
		{		
			
			$str = "SELECT * FROM $this->imageTable WHERE image LIKE '" . $id->bait_id . "_%Xgal%'";
			$query = $this->db->query($str);
			
			if(!$query)
			{
				return "ERROR: " . $id->bait_id . "did not return a picture in Data_Model:setPictures."; 
			} else {
				if($query->num_rows() > 0)
				{
					/*
					***
					* Sets up an array that will contain the array
					* of pictures and grab the pictures
					**/
					$arr = array();
					
					foreach($query->result() as $row)
					{
						$arr[] = $row->image;
					}
					
					/*
					***
					* If get all pictures is flagged true, get the entire array
					* else only get the relavant plateNumber
					**/
					if($getAllPictures){
						$id->image = $arr;
					} else {
						//All transcription Factors should have the same plate at this point.
						$id->image = $arr[ $id->transcriptionData[0]->position['plate_num'] ];
					}
				
				} else {
					//return "ERROR: Database returned no results";
				} 
			}
		} 
		/*
		***
		* Just unsetting some references here
		*/
		unset($id);
		unset($data);
	}
	
	public function setInput($input){
		$this->input = $input;
	}
	
	public function getInput(){
		return  $this->input;
	}
	
	/*
	 *  Unit Tested by Justin
	 */
	public function getTranTags(){
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return "[]";}
		$transcriptorTags = "[";
		
		$query = $this->db->query("SELECT DISTINCT orf_name, orf_name2, wb_gene, common_name, coordinate FROM $this->transcriptionTable");
		if(!$query)
		{
			echo "Transcription Factor Autocomplete Tags Not Found!";
		} else {
			$r = 0;
			$rc = $query->num_rows();
			foreach ($query->result() as $row)
			{
				$r++;
				$transcriptorTags .=   '"' . $row->orf_name    . '"';
				$transcriptorTags .= ', "' . $row->orf_name2   . '"';
				$transcriptorTags .= ', "' . $row->wb_gene     . '"';
				$transcriptorTags .= ', "' . $row->common_name . '"';
//				$transcriptorTags .= ', "' . $row->coordinate  . '"';
				if( $r != $rc ){ $transcriptorTags .= ", "; }
			}
			$transcriptorTags .= "];";
		}
		
		return $transcriptorTags;

	}
	/*
	 *  Unit Tested by Justin
	 */
	public function getPromTags(){
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return "[]";}
		$promotorTags = "[";

		$query = $this->db->query("SELECT DISTINCT bait_id, bait_name, bait_name2, bait_name3 FROM $this->promoterTable");
		if(!$query)
		{
			echo "Promoter Autocomplete Tags Not Found!";
		} else {
			$r = 0;
			$rc = $query->num_rows();
			foreach ($query->result() as $row)
			{
				$r++;
				$promotorTags .= '"'   . $row->bait_id    . '"';
				$promotorTags .= ', "' . $row->bait_name  . '"';
				$promotorTags .= ', "' . $row->bait_name2 . '"';
				$promotorTags .= ', "' . $row->bait_name3 . '"';
				if( $r != $rc ){ $promotorTags .= ", "; }
			}
			$promotorTags .= "];";
		}
		
		return $promotorTags;
	}
	
	function microtime_float(){
	    list($usec, $sec) = explode(" ", microtime());
	    return ((float)$usec + (float)$sec);
	}

	/*
	 * Queries the database for intensityData and returns a matrix
	 */
	
	public function getIntensityData($promData, $plateNumber)
	{	
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return "[]";}	
		$VALUE_NOT_FOUND = 0;
		
		$list_tags = array(0=>"_1-4", 1=>"_5-8", 2=>"_9-12");
		
		$str = "SELECT * FROM $this->interactionTable WHERE plate_name   = '" . $promData['bait_id'] . "'
		                                                AND plate_number = '" . $plateNumber         . "'";
		//echo $str
		$query = $this->db->query($str);

		
		if(!$query)
		{
			
		} else {
			if($query->num_rows() > 0){
				foreach ($query->result() as $row)
				{
					///////////////////////////////////////////////////////////////////////////////////////////
					$matrix[$row->y_coord][$row->x_coord]->orf_name           = $row->orf_name             ; //
					$matrix[$row->y_coord][$row->x_coord]->original_intensity = $row->orig_intensity_value ; //
					$matrix[$row->y_coord][$row->x_coord]->rc_intensity       = $row->rc_intensity_value   ; //
					$matrix[$row->y_coord][$row->x_coord]->ptp_intensity      = $row->ptp_intensity_value  ; //
					$matrix[$row->y_coord][$row->x_coord]->z_score            = $row->z_score              ; //
					$matrix[$row->y_coord][$row->x_coord]->call_type          = $row->call_type            ; //
					$matrix[$row->y_coord][$row->x_coord]->human_call         = $row->human_call           ; //
					$matrix[$row->y_coord][$row->x_coord]->modified_call      = $row->modified_call        ; //
					$matrix[$row->y_coord][$row->x_coord]->array_coord        = $row->array_coord          ; //
					///////////////////////////////////////////////////////////////////////////////////////////
				}
			} else {
				for($i = 0; $i < X_ELEMENTS; $i++){
					for($j = 0; $j < Y_ELEMENTS; $j++){
						/////////////////////////////////////////////////////////////////////////////////
						$matrix[$j][$i]->orf_name           = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->original_intensity = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->rc_intensity       = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->ptp_intensity      = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->z_score            = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->call_type          = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->human_call         = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->modified_call      = $VALUE_NOT_FOUND ; //
						$matrix[$j][$i]->array_coord        = $VALUE_NOT_FOUND         ; //
						/////////////////////////////////////////////////////////////////////////////////
					}
				}
				
			}
		} // end if query
		return $matrix;
	}

	public function update($table, $data, $where){
		/*
		 * Make sure the user is logged in to access the database
		 */
		if(!$this->session->userdata('is_logged_in')) {return "false";}	
		$query = $this->db->update_string($table, $data, $where);
		
		$success = $this->db->query($query);
		
		return $success;
	}
	
	/*
	*** parseCoordinates
	* Parses the coordinates from bait_preycoord into more easily 
	* manipulatable ( plate_num, x, y ) data and returns an array
	**/
	public function parseCoordinates(&$data)
	{
		$coord_arr = explode("-", $data->coordinate2); // a number,
		
		/*
		***
		*    EAA01,[$pos_mod]-[$brow][$bcol]
		**/
		
		/*
		 * $pos_mod contains the position modifier
		 */
		$pos_mod = intval($coord_arr[0]);
			
		/*
		 * $brow contains the row		
		 */
		$row = $this->convertLetter2Number(substr($coord_arr[1], 0, 1));
		
		/*
		 *  $bcol contains the column
		 */
		$col = intval(substr($coord_arr[1], 1));
		
		/*
		 * Contains the plate_num either 0, 1 or 2 depending on pos_mod
		 */
		$pos['plate_num'] = floor(($pos_mod - 1)/4);
		
		/*
		 * Contains the x coordinate
		 */
		$px = ($col-1)*2;
		if(($pos_mod%4)%2 == 1){$px = $px + 1;}
		if(($pos_mod%4)%2 == 0){$px = $px + 2;}
		$pos['x'] = $px;
		
		/*
		 * Contains the y coordinate
		 */
		$py = ($row-1)*2;
		if($pos_mod%4 == 1 || $pos_mod%4 == 2){$py = $py + 1;}
		if($pos_mod%4 == 3 || $pos_mod%4 == 0){$py = $py + 2;}
		$pos['y'] = $py;

		/*
		 * sets the position in an array
		 */
		
		$data->position = $pos;
		
		unset($data);
	} // end function parseCoordinates
	
	private function convertLetter2Number($let) 
	{
		$ascval = ord($let);
			
		if ($ascval > 64 && $ascval < 91) 
		{
			$let = $ascval - 64;
		} // end if asc val > 64 ..
		
		return $let;
	} // end function convertLetter2Number
	
	
}
